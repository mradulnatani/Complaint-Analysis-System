classDiagram
    class IPCSection {
        <<data class>>
        +str section
        +str keywords
        +str description
        +list related_sections
        +get_section_details() Dict
    }

    class TextPreprocessing {
        <<service>>
        -WordNetLemmatizer lemmatizer
        -set stop_words
        +preprocess_text(text: str) str
        -remove_punctuation(text: str) str
        -remove_stopwords(tokens: list) list
        +lemmatize_tokens(tokens: list) list
        +download_nltk_resources() void
    }

    class VectorizationProcessor {
        <<transformer>>
        -TfidfVectorizer vectorizer
        -matrix ipc_vectors
        -matrix complaint_vectors
        +configure_vectorizer(parameters: Dict) void
        +transform_text(text: str) matrix
        +generate_ipc_section_vectors(sections: List[IPCSection]) matrix
        +get_feature_names() List[str]
    }

    class SimilarityCalculator {
        <<utility>>
        +calculate_cosine_similarity(complaint_vector: matrix, ipc_vectors: matrix) float[]
        +calculate_jaccard_similarity(text1: str, text2: str) float
        +rank_similarities(similarities: float[]) List[Tuple]
    }

    class FuzzyMembershipSystem {
        <<intelligent system>>
        -ctrl.Antecedent score
        -ctrl.Consequent membership
        -ctrl.ControlSystem membership_ctrl
        +define_membership_functions() void
        +create_fuzzy_rules() void
        +compute_fuzzy_membership(score: float) float
        +setup_control_system() void
        +get_fuzzy_confidence_level(score: float) str
    }

    class ComplaintAnalyzer {
        <<main processor>>
        -List[IPCSection] ipc_sections
        -TextPreprocessing preprocessor
        -VectorizationProcessor vectorizer
        -SimilarityCalculator similarity_calc
        -FuzzyMembershipSystem fuzzy_system
        +analyze_complaint(complaint_text: str) Dict
        -find_applicable_sections(similarity_scores: float[]) List[Tuple]
        -process_similarity_scores(scores: float[]) List[str]
        +get_detailed_section_recommendations() List[Dict]
    }

    class KnowledgeBase {
        <<repository>>
        -List[Dict] ipc_sections
        -str database_path
        +load_sections(source: str) void
        +update_sections(new_sections: List[Dict]) void
        +search_sections(query: str) List[IPCSection]
        +validate_sections() bool
    }

    class MainApplication {
        <<controller>>
        -ComplaintAnalyzer complaint_analyzer
        -KnowledgeBase knowledge_base
        +run() void
        -get_user_input() str
        -display_results(results: Dict) void
        -log_analysis_metrics() void
    }

    class LoggingService {
        <<service>>
        +log_analysis_event(event: str, details: Dict) void
        +generate_analysis_report(analysis_results: Dict) void
    }

    TextPreprocessing --> ComplaintAnalyzer: "preprocesses"
    VectorizationProcessor --> ComplaintAnalyzer: "vectorizes"
    SimilarityCalculator --> ComplaintAnalyzer: "computes similarities"
    FuzzyMembershipSystem --> ComplaintAnalyzer: "determines confidence"
    ComplaintAnalyzer --> IPCSection: "analyzes"
    KnowledgeBase --> ComplaintAnalyzer: "provides sections"
    MainApplication --> ComplaintAnalyzer: "orchestrates"
    MainApplication --> LoggingService: "logs events"
    KnowledgeBase --> IPCSection: "manages"
